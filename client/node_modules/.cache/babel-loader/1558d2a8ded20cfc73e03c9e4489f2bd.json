{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahmed\\\\Documents\\\\Desktop\\\\gpt-assist\\\\client\\\\src\\\\pages\\\\chat\\\\chat.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport \"./chat.css\";\nimport LeftNav from \"../../components/leftnav/leftnav\";\nimport FormSection from \"../../components/formSection/formSection\";\nimport AnswerSection from \"../../components/answerSection/answerSection\";\nimport UpgradePane from \"../../components/upgradePane/upgradePane\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n  const [storedValues, setStoredValues] = useState([]);\n  const config = new Configuration({\n    apiKey: process.env.OPENAI_KEY\n  });\n  delete config.baseOptions.headers[\"User-Agent\"];\n  const openai = new OpenAIApi(config);\n  const generateResponse = async () => {\n    const params = {\n      model: 'text-davinci-003',\n      prompt: \"hello\"\n    };\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${process.env.OPENAI_KEY}`\n      },\n      body: JSON.stringify(params)\n    };\n    const response = await fetch('https://api.openai.com/v1/completions', requestOptions);\n    console.log(response.data.choices[0].text);\n  };\n  generateResponse();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatContainer\",\n    children: [/*#__PURE__*/_jsxDEV(LeftNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"OuterWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(UpgradePane, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"InnerWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat\",\n          children: [/*#__PURE__*/_jsxDEV(AnswerSection, {\n            storedValues: storedValues\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormSection, {\n            generateResponse: generateResponse\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor\",\n          children: \"editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"Ot+oioh89jezi3f1OL6LdZ0683k=\");\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","LeftNav","FormSection","AnswerSection","UpgradePane","Configuration","OpenAIApi","useState","jsxDEV","_jsxDEV","Chat","_s","storedValues","setStoredValues","config","apiKey","process","env","OPENAI_KEY","baseOptions","headers","openai","generateResponse","params","model","prompt","requestOptions","method","body","JSON","stringify","response","fetch","console","log","data","choices","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ahmed/Documents/Desktop/gpt-assist/client/src/pages/chat/chat.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"./chat.css\";\r\nimport LeftNav from \"../../components/leftnav/leftnav\";\r\nimport FormSection from \"../../components/formSection/formSection\";\r\nimport AnswerSection from \"../../components/answerSection/answerSection\";\r\nimport UpgradePane from \"../../components/upgradePane/upgradePane\";\r\nimport { Configuration, OpenAIApi } from \"openai\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Chat() {\r\n  const [storedValues, setStoredValues] = useState([]);\r\n\r\n  const config = new Configuration({\r\n    apiKey: process.env.OPENAI_KEY,\r\n  });\r\n  \r\n  delete config.baseOptions.headers[\"User-Agent\"];\r\n\r\n  const openai = new OpenAIApi(config);\r\n\r\n  const generateResponse = async () => {\r\n    \r\n    const params = {\r\n      model: 'text-davinci-003',\r\n      prompt:\"hello\",\r\n    }\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${process.env.OPENAI_KEY}`,\r\n      },\r\n\r\n      body: JSON.stringify(params)\r\n    };\r\n\r\n    const response = await fetch('https://api.openai.com/v1/completions', requestOptions);\r\n    console.log(response.data.choices[0].text);\r\n  };\r\n\r\n  generateResponse()\r\n\r\n  return (\r\n    <div className=\"chatContainer\">\r\n      <LeftNav />\r\n      <div className=\"OuterWrapper\">\r\n        <UpgradePane />\r\n        <div className=\"InnerWrapper\">\r\n          <div className=\"chat\">\r\n            <AnswerSection storedValues={storedValues} />\r\n            <FormSection generateResponse={generateResponse} />\r\n          </div>\r\n          <div className=\"editor\">editor</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}